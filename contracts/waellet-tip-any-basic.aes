@compiler >= 4

include "List.aes"
include "Func.aes"
include "Option.aes"

contract WaelletTipAnyBasic =

  record state = 
    { tips          : map(string * int, tip)
    , tips_flat     : map(string, int) }

  record tip = 
    { sender        : address
    , received_at   : int
    , repaid        : bool
    , amount        : int
    , note          : option(string) }
    
  datatype event = 
    TipReceived(address, int, string)
    | TipWithdrawn(address, int, string)

  entrypoint init () : state =
    { tips = {},
      tips_flat = {} }

  payable stateful entrypoint tip (url: string, note: option(string)) : unit =
    put(state{ tips[(url, size(url))] = new_tip(url, note),
               tips_flat[url = 0] @ n = n + 1 })
    Chain.event(TipReceived(Call.caller, Call.value, url))

  stateful entrypoint withdraw (url : string) : unit =
    // aggregate all tips for the present url which are not claimed yet
    Chain.spend(Call.caller, 0)

  entrypoint tips_for_url(url : string) = tips_by_key(url)
  entrypoint get_state() : state = state
  
  stateful entrypoint claim(url: string) =
    // aggregate tips
    let amount = aggregate_unpaid_tips(url)
    let updated_tips = List.map((x) => x{repaid = true}, tips_for_url(url))
    Chain.spend(Call.caller, amount)
    Chain.event(TipWithdrawn(Call.caller, amount, url))

  entrypoint unpaid(url : string) =
    aggregate_unpaid_tips(url)
  
  function aggregate_unpaid_tips(url : string) =
    List.sum(List.map((x) => x.amount, List.filter((x) => x.repaid == false, tips_for_url(url))))
    
  function tips_by_key(key : string) =
    [ state.tips[(key, n)] | n <- [0..size(key) - 1] ]

  function size(key : string) : int = state.tips_flat[key = 0]

  stateful function new_tip(url : string, note: option(string)) : tip =
    { sender        = Call.caller,
      received_at   = Chain.timestamp,
      repaid        = false,
      amount        = Call.value,
      note          = note }

